// hooks/useLinkStorage.js
import { useState, useEffect } from 'react';
import { LinkStorage } from '../LinkStorage.js';

export function useLinkStorage() {
  const [links, setLinks] = useState([]);
  const [logs, setLogs] = useState([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const storage = LinkStorage.load();
    setLinks(storage.getAll());
  }, []); // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
  useEffect(() => {
    const handleStorageChange = () => {
      const storage = LinkStorage.load();
      setLinks(storage.getAll());
    };
    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  // –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ addLink ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const addLink = (link, name = '', desc = '', themes = [], isHidden = false) => {
    const storage = LinkStorage.load(); // –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const newLink = storage.addLink(link, name, desc, themes, isHidden);
    setLinks(storage.getAll()); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return newLink;
  }; 
  const editLinkById = (id, link='', name = '', desc = '', themes = [], isHidden = false) => {
    const storage = LinkStorage.load(); // –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    storage.editLinkById(id, link, name, desc, themes, isHidden);
    setLinks(storage.getAll());
    return ;
  }

  const addRatingById = (id) => {
    const storage = LinkStorage.load();
    storage.addRatingById(id);
    setLinks(storage.getAll());
  };

  // –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ removeLinkById ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const removeLinkById = (id) => {
    const storage = LinkStorage.load();
    const success = storage.removeLinkById(id);
    if (success) {
      setLinks(storage.getAll()); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
    return success;
  };

  // –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ getLinksByTheme ‚Äî –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º
  const getLinksByTheme = (themeName) => {
    const storage = LinkStorage.load();
    return storage.getLinksByTheme(themeName);
  };

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  const getAllThemes = () => {
    const storage = LinkStorage.load();
    return storage.getAllThemes();
  };

  const getLinkById = (id) => {
    const storage = LinkStorage.load();
    return storage.getLinkById(id);
  };

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
  const getAllLinks = () => {
    const storage = LinkStorage.load();
    return storage.getAll();
  };

  const logClick = (linkId, additionalData = {}) => {
      try {
          const storage = LinkStorage.load();
          const link = storage.getLinkById(linkId);
          if (!link) {
              console.warn(`Cannot log click: link with id ${linkId} not found`);
              return;
          }

          const logEntry = {
              timestamp: new Date().toISOString(),
              url: link.Link,
              name: link.Name,
              linkId: linkId,
              userAgent: navigator.userAgent,
              referrer: document.referrer || 'direct',
              ...additionalData, // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          };

          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
          const storedLogs = localStorage.getItem('clickLogs');
          let logs = storedLogs ? JSON.parse(storedLogs) : [];

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥
          logs.push(logEntry);
          console.log(logs);

          // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
          const MAX_LOGS = 1000;
          if (logs.length > MAX_LOGS) {
              logs = logs.slice(-MAX_LOGS);
          }
          setLogs(logs);
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
          localStorage.setItem('clickLogs', JSON.stringify(logs));

          console.log('üîó Click logged:', logEntry);
          return logEntry;

      } catch (error) {
          console.error('Failed to log click:', error);
      }
  }

  return {
    links, // —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —Å—Å—ã–ª–æ–∫ (—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π!)
    addLink,
    removeLinkById,
    getLinksByTheme,
    getAllThemes,
    getLinkById,
    getAllLinks,
    editLinkById,
    addRatingById,
    logClick,
    logs
  };
}